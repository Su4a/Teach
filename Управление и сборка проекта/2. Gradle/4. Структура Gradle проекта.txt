В отличии от Maven, конфигурация Gradle гораздо сложнее (обратите внимание, что при инициализации проекта было сгенерировано несколько служебных папок и файлов)
В первую очередь нас будут интересовать следующие файлы:
1. settings.gradle — содержит настройки проекта. Данный файл обязателен, только если вы работаете с многомодульным проектом — содержит глобавльные настройки нашего проекта, в том числе подключаемые модулю (первый конфигурационный файл, который Gradle пытается обнаружить при запуске)
2. build.gradle — конфигурация gradle модуля. Файл с конфигурацией модуля gradle проекта. Определяет всю логику сборки данного модуля (что собираем, как собираем). Может быть написан на groovy (имя build.gradle) либо на kotlin (имя build.gradle.kts.)
3. gradle.properties — содержит переменные (ключ + значение). Опциональный файл и по умолчанию не создается. Этот файл используется для настройки процесса Java, которые будет использоваться для выполнения сборки. Использование данного файла позволяет сохранять определенные настройки в системе управления версиями, чтобы вся команда могла работать в согласованной среде. Кроме того, его можно использовать для конфигурации самого проекта

Gradle можно охарактеризовать двумя концепциями: проекты и задачи (build - prpject - task)
Эти концепции объясняются следующим:
- Проект (Project) – это то, что мы создаем (например, файл JAR) или делаем (разворачиваем наше приложение в производственной среде). Проект состоит из одной или нескольких задач
- Задача (Task) – это атомарная работа, выполняемая нашей сборкой (например, компиляция нашего проекта или выполнение тестов)

Каждая сборка Gradle состоит из одного или нескольких проектов. То, что представляет собой проект, зависит от того, какой результат вы хотите получить. Например, проект может представлять JAR-файл библиотеки или веб-приложение (WAR-файл). Он может представлять собой ZIP-файл дистрибутива, собранный из JAR-файлов, созданных другими проектами. Проект не обязательно является чем то что нужно собрать: это может быть и набор команд, определяющих то что нужно сделать, например, развертывание вашего приложения в тестовой или промышленной среде

Действия, которые выполняет Gradle над проектом, определяются одной или несколькими задачами. Задача представляет собой некую атомарную часть процесса сборки. Это может быть компиляция некоторых классов, создание JAR-файла, создание Javadoc или публикация архивов в репозитории. Для запуска задач применяются плагины и их не нужно определять самостоятельно

Процесс сборки проекта на Gradle:
- Gradle запускается как новый процесс JVM;
- Gradle анализирует файл gradle.properties и соответствующим образом настраивает процесс.
- Создается экземпляр Settings для сборки.
- Сравнивается файл settings.gradle с объектом Settings.
- Создается иерархия Projects на основе настроенного объекта Settings.
- Gradle выполняет каждый файл build.gradle для своего проекта.

Плагины: plugins {id 'java' id application}
● ‘java’ - плагин java приложения
● ‘application’ — плагин консольного приложения
Философия дизайна Gradle заключается в том, что все полезные функции предоставляются плагинами Gradle, которые необходимы для:
- Добавление новых Task в Project.
- Предоставление конфигурации по умолчанию для добавленных Task. Конфигурация по умолчанию добавляет новые соглашения к проекту (например, расположение файлов исходного кода).
- Добавление новых свойства, которые используются для переопределения конфигурации плагина по умолчанию.
- Добавление новых зависимостей в проект.

Репозитории: repositories {mavenCentral()}
Gradle использует те же механизмы для работы с репозиториями, что и Maven — таким образом вы можете работать с теми же источники артефактами, что и ранее при работе с Apache Maven
Тут стоит отметить отличие Gradle при синхронизации репозиториев. Gradle при анализе зависимостей вычисляется хэш сумма — поэтому даже если, изменения будут внесены в старую версию библиотеки (что в принципе некорректно), Gradle подтянет библиотеку

Зависимости: dependencies {GAV}
Одной из главных задач любой системы автоматизации сборки – это управление зависимостями, то есть определение перечня артефактов, которые необходимы для реализации проекта. Система сборки должна обеспечить их наличие в нужный момент и нужным образом собрать конечный артефакт нашего приложения
- testImplementation и testRuntimeOnly — это прямой аналог Scope Maven, определяющий область использования библиотеки



