Maven предоставляет пользователю три жизненных цикла. Подразумевается, что для выполнения определенного этапа все предыдущие должны успешно запуститься и завершиться. То есть предыдущие этапы нельзя пропускать
● Clean используется для удаления ранее скомпилированных файлов (папка target проекта).
● Site используется для генерации документации.
● Default – основной или жизненный цикл по умолчанию. Отвечает за создание приложения.
Clean и site — вспомогательные жизненные циклы. Каждый из них состоит из одного одноименного этапа

Default рассмотрим подробнее:
● validate — проверка структуры pom.xml;
● compile — компиляция исходного кода проекта и исходного кода тестов;
● test — запуск тестовых классов;
● package — упаковка проекта (по умолчанию — jar);
● verify — запуск интеграционных тестов;
● install — копирование jar (war, ear) в локальный репозиторий;
● deploy — публикация файла в удаленный (внешний) репозиторий.

На практике мы чаще всего будем пользоваться командой mvn clean test для
запуска тестов или mvn clean package для сборки проекта в jar файл

Как команды понимают, что нужно делать при обращении к ним? Для этого используются plugins — фактически такие же зависимости, в которых реализована нужная бизнес-логика. В Maven они расположены на соответствующей вкладке — сейчас там только плагины по умолчанию, но список можно изменить, внеся изменения в pom-файл. На этом этапе нам достаточно плагинов по умолчанию.

Каждая команда связана с соответствующим плагином или несколькими плагинам, запускаемыми последовательно, через goal — по сути, функции плагина, которую мы можем вызвать. Плагин может состоять из нескольких goal, предназначенных для разных целей. Таким образом, вызывая команду, вы на самом деле обращаетесь к набору goal соответствующих плагинов.
