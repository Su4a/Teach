Тут стоит обратить внимание на работу с версией приложения. В принципе вы можете указывать любое значение в этом поле, если не планируете публиковать свое решение в общедоступном репозитории. В случае промышленной разработки стоит задуматься о правилах формирования новой версии (использование мажорной и минорной части и т.д.)

Так же обратите внимание, что в примере используется ключевое слово SNAPSHOT.
Дело в том, что алгоритм синхронизации зависимостей в Maven реализован следующем образом:
- Maven использует GAV для однозначного определения необходимой зависимости;
- Maven в первую очередь обращается в локальному репозиторию, для проверки наличия соответствующего .jar файла совпадающего с искомым GAV.
- В случае если объект не найден, Maven обращается к центральному репозиторию и пытается вытянуть зависимость.
- Если зависимость есть в локальном репозитории, Maven не обращается к центральному репозиторию и использует локальный файл.

Из этого алгоритма вытекает следующее правило — если вы ранее опубликовали в общедоступном репозитории свою библиотеку и захотели внести изменения, вы обязательно должны изменить GAV (указать новую версию), иначе, клиенты которые уже успели синхронизировать зависимость со своим локальным репозиторием, об этом никогда не узнают. И вот здесь использование SNAPSHOT в имени версии, позволяет указать Maven о необходимости каждый раз синхронизировать библиотеку с репозиторием. Т.е. состояние кода для проекта не зафиксировано — текущая версия в разработке и результирующий jar-файл может меняться

Конфликт зависимостей:
Здесь правда стоит отметить еще одно поведение Maven связанное с работой с зависимостями, а именно стратегию разрешения конфликта зависимостей. Добавляя соответствующие зависимости в pom-файлы, вы добавляете не один jar, а все дерево зависимостей, которые связаны с библиотекой (обратите внимание на блок Dependencies, который был сформирован Maven). Вы не будете взаимодействовать с большей частью из них напрямую

Когда вы добавляете несколько библиотек, которые могут ссылаться на одну и ту же дополнительную зависимость, но разной версии, случается конфликт. Maven должен выбрать и добавить к проекту только одну из них. Это и есть стратегия
разрешения конфликтов зависимостей в Maven:
- Всегда выбирается библиотека, которую указал разработчик, — то есть та, которую вы сами прописали в pom-файле. Это решение можно использовать, если Maven добавляет в сборку библиотеку меньшей версии.
- Предпочтение отдается той библиотеке, что ближе к корню (уровень узла
дерева)

Иногда при конфликте библиотек нельзя выбрать никакую из версий (выбираем одну версию перестает работать другая библиотека и т.д.). Это самая
трудноустранимая проблема — приходится искать альтернативное решение: возможно, придется отказаться от использования какой-либо библиотеки или увеличить версию, что может потребовать изменений в программном коде

Несколько рекомендаций по работе с зависимостями:
Представьте, что вам понадобилась новая функциональность (новая библиотека). Например, вы хотите найти и добавить инструмент для тестирования JUnit. При поиске помните о принципах:
● Выбирайте артефакты известных вендоров — помните, что одну и ту же задачу можно решить с помощью разных библиотек, но лучше использовать проверенные источники от крупных разработчиков.
● Выбирайте артефакты, для которых выпускаются обновления — если у библиотеки много версий, значит ее поддерживают, обновляют и исправляют ошибки.
● Не останавливайтесь на первом ответе — проанализируйте несколько статей, помните, что в интернете есть как хорошие, так и плохие ответы.
● Некоторые фреймворки, которые вы будете использовать, уже содержат необходимый пул библиотек (Spring Framework).