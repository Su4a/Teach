При первом использовании Git необходимо представиться:
1.git config --global user.name "Ваше имя на английском"
2.git config --global user.email почта@mail.ru
3.git config --list - показать конфигурацию

Пример:
git config --global --replace-all user.name "Su4a"
git config --global --replace-all user.email "stSu4a@gmail.com"

КОМАНДЫ
1.git --version - узнать версию GIT
2.git init - инициализация локального репозитория GIT в данной папке
3.git status - статус текущего состояния файлов (ветки, коммиты, новые файлы)
4.git add - добавить файлы в репозиторий (версионность)
- git add .* - все файлы в текущей папке
- git add -A - все новые файлы в текущей папке
- git add <file> - кокретный файл
5.git commit - применить коммит (зафиксировать изменения репозитория)
Можно добавить параметры к коммиту:
-m "сообщение" - коммит выбранных файлов
-am (a) "сообщение" - коммит всех изменившихся файлов (не новых)
6.git log - журнал изменений репозитория
7.git checkout <хэш коммита> - перейти к другой версии репозитория
Указывать коммит можо польностью, можно и первые 4 символа
8.git checkout master - вернуться в актуальное состояние репозитория
9.git diff - показывает разницу между текущим и зафиксированным состоянием файла

ВЕТВЛЕНИЯ (branch)
1.git branch - показывает скисок веток, * - указывает в какой ветке находимся
2.git branch имя_ветвления - создает ветвление
3.git branch -d имя_ветвления - удаление ветвления
- git branch --delete имя_ветвления - удаление ветвления
4.git checkout имя_ветвления - перейти на другое ветвление
5.git checkout -b имя_ветвления - создать и перейти на ветвление
6.git merge имя_ветвления - слияние веток (подтягивает изменения из вызываемой ветки)
При слиянии возможны конфликты - когда ветка соединяется с мастером, который был изменен (имеет 2 версии одного и того же файла)
- current - принять текущую версию (данной ветки)
- incoming - принять пришедшую версию
- both - принять оба варианта
- compare - сравнить оба варианта
После разрешения конфликта нужно закоммитить файл
7.git log --graph - визуализировать ветвления
8.git log --oneline - краткие коммиты

РЕПОЗИТОРИИ
1.git clone ссылка_на_репозиторий/проект - скопировать удаленный репозиторий в текущую папку
- после клонирования нужно перейти в папку репозитория для выполнения других команд
2.git remote add origin ссылка_на_репозиторий - скопировать локальный репозиторий в удаленный
  git branch -M main - указание основной ветки (какая ветка является основной)
  git push -u origin main - отправить с локального репозитория на удаленный
3.git push - отправить все изменения в удаленный репозиторий. Возможен конфликт (аналог ветвления)
- git push --set-upstream origin имя_ветки - пуш из другой ветки
- git push имя_пулл_реквеста ссылка_на_репозиторий/проект master
4.git pull - взять с удаленного репозитория все текущие изменения (попытается сделать merge с текущим состоянием на локальном репозитории). Возможен конфликт (аналог ветвления)
5.git request-pull имя_пулл_реквеста ссылка_на_репозиторий/проект master - преложить изменения
- Fork - скопировать репозиторий на свой аккаунт (гитхаб)
- склонировать репозиторий на локальный компьютер
- создать отдельную ветку
- на измененной ветке сделать коммит и пуш в свой удаленный репозиторий
- сделать pull-request в репозиторий автора

ИГНОР
- Создается файл с именем .gitignore
- В файле .gitignore пишутся имена файлов, которые нужно игнорировать (вместе с расширениями)
- Файл ИГНОР нужно закоммитить в репозиторий















