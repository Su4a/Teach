Метод sorted() создает новый поток, содержащий элементы исходного потока, отсортированные в порядке возрастания
При вызове метода sorted() возвращается новый поток, содержащий те же элементы, что и исходный поток, но в отсортированном порядке

Statefull операция
ORDERED: всегда устанавливается после операции sorted(), так как элементы теперь упорядочены в соответствии с естественным порядком или порядком, определенным компаратором.
DISTINCT: сохраняется, если был в исходном Spliterator.
SORTED: всегда устанавливается.
SIZED, SUBSIZED: сохраняются, если были в исходном Spliterator.
NONNULL: сохраняется, если был в исходном Spliterator.
IMMUTABLE, CONCURRENT: сохраняются, если были в исходном Spliterator.

Пример:
List<String> names = Arrays.asList("Alice", "Bob", "Charlie", "David");
List<String> sortedNames = names.stream()
                                .sorted()
                                .collect(Collectors.toList());
System.out.println(sortedNames); // prints ["Alice", "Bob", "Charlie", "David"]

Особенности:
В метод можно дать готовый компоратор, можно оставить метод пустой и тогда сортировка будет по возрастанию, или же прописать условие сортировки
Если элементы исходного потока не реализуют интерфейс Comparable, может возникнуть исключение ClassCastException 
Чтобы избежать этого, можно предоставить собственный компаратор в качестве аргумента метода sorted()
Компоратор принимает 2 аргумента для сравнивания: .sorted((a,b) -> a-b) - условие сортировки (если а минус б положительный то сортировка по порядку)

Компораторы:
Comparator.reverseOrder() - реверсивная сортивовка