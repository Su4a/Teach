Stream API предоставляет возможность параллельной обработки данных, что может способствовать увеличению производительности на многоядерных процессорах. 
Однако необходимо учитывать, что параллельное выполнение может внести дополнительную сложность и накладные расходы, поэтому следует использовать его обдуманно
Для выполнения потоков в параллельном режиме можно использовать методы parallelStream() или parallel(). Без явного вызова этих методов поток будет выполняться последовательно 
Для разделения коллекции на части, которые могут быть обработаны отдельными потоками, Java использует метод Spliterator.trySplit()
С точки зрения плана выполнения, параллельная обработка схожа с последовательной, за исключением одного основного отличия. Вместо одного набора связанных операций у нас будет несколько его копий, и каждый поток будет применять эти операции к своему сегменту элементов 
После завершения обработки все результаты, полученные каждым потоком, объединяются в один общий результат

Место расположение .parallel() в Pipline:
Может возникнуть вопрос, влияет ли расположение метода .parallel() в пайплайне на поведение потока?
В действительности, место, где указан .parallel(), не имеет значения, поскольку это просто устанавливает характеристику CONCURRENT. В свою очередь, sequential() удаляет эту характеристику.

Методы: parallelStream() или parallel()







