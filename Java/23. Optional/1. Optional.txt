Optional - альтернатива работы с экземплярами, когда мы не знаем что внутри
Параметр Optional используется для переноса объектов и обеспечения обработки ссылок на null с помощью различных API-интерфейсов

Как создать Optional (упаковка данных в optional)
Существует три способа создания объектов Optional:
- of(T value) — создание экземпляра Optional ненулевого (non-null) объекта. Имейте в виду, что использование of() для ссылки на объект null приведет к появлению NullPointerException
- ofNullable(T value) — создание значения Optional для объекта, который может быть нулевым (null)
- empty() — создание экземпляра Optional, который представляет ссылку на null

Примеры:
Optional<String> stringExample = Optional.of(name)
Optional<Integer> integerExample = Optional.ofNullable(age)
Optional<Object> emptyExample = Optional.empty();

Optional дает несколько преимуществ:
- абстрагирует проверки null
- предоставляет API для обработки объектов null
- позволяет декларативному подходу выражать то, что достигается

Мы должны избегать использования Optional в следующих сценариях:
- В качестве типов параметров для POJO, таких как объекты DTO. Optional не сериализуемы, поэтому их использование в POJO лишает объект возможности сериализации
- В качестве аргумента метода. Если аргумент метода может быть null, то с точки зрения чистого кода передача null по-прежнему предпочтительнее, чем передача Optional
  Кроме того, вы можете создать перегруженные методы для абстрактной обработки отсутствия аргумента нулевого метода
- Для представления объекта Collection, который отсутствует. Коллекции могут быть пустыми, поэтому пустая Collection, как пустой Set или List, должна использоваться для представления Collection без значений

Методы Optional:
- isPresent() — этот метод сообщает вам, содержит ли объект Optional ненулевое (non-null) значение
- get() — извлекает значение для Optional с текущим значением. Имейте в виду, что вызов get() для пустого Optional приведет к NullPointerException
- ifPresent(person -> sout(person)) - этот метод совокупность метода isPresent и get. Сравнивает на содержимое и делает действие, которое передается в аргумент метода (обычно лямбдой)
- orElse(аргумент) - возвращает сорержимое, если внутри ничего нет, возвращает аргумент метода
- orElseGet(() -> Person().builder().name("Default")) - возвращает содержимое, если внутри ничего нет, выполняет аргумент и возвращает его
- orElseThrow(() -> new Exception()) - возвращает содержимое, если внутри ничего нет то выбрасывает исключение
- map(Person::getName).orElseThrow() - работа над элементом или с элементом, если его нет то выбрасывать исключение
------------------------------------------------

Пример:
public Optional<Person> findById(String id) {
  if (id.equals("id")) {
    return Optional.of(new Person("Timofei"));
  }
  return Optional.empty();
}

String name = personRepository.findById(id)
  .map(Person::getName)
  .orElseThrow(() -> new NoPersonException(id));
sout(name)
//pring - Timofei




