Почти все классы пакета, осуществляющие ввод-вывод, так или иначе наследуются от InputStream для входных данных, и для выходных – от OutputStream
InputStream / OutputStream – это базовые абстрактные классы, которое определяют необходимые методы для работы с байтовыми потоками данных

InputStream -  описывает базовые методы для работы со входящими байтовыми потоками данных
Простейшая операция представлена методом read() (без аргументов). Согласно документации, этот метод предназначен для считывания ровно одного байта из потока, однако возвращает при этом значение типа int
В том случае, если считывание произошло успешно, возвращаемое значение лежит в диапазоне от 0 до 255 и представляет собой полученный байт (значение int содержит 4 байта и получается простым дополнением нулями в двоичном представлении) 
Если достигнут конец потока, то есть в нем больше нет информации для чтения, то возвращаемое значение равно -1
Если же считать из потока данные не удается из-за каких-то ошибок, или сбоев, будет брошено исключение java.io.IOException
Дело в том, что каналы передачи информации, будь то Internet или, например, жёсткий диск, могут давать сбои независимо от того, насколько хорошо написана программа. А это означает, что нужно быть готовым к ним, чтобы пользователь не потерял нужные данные 
Когда работа с входным потоком данных окончена, его следует закрыть. Для этого вызывается метод close()
Этим вызовом будут освобождены все системные ресурсы, связанные с потоком
Методы: read()

OutputStream – это базовый абстрактный класс для потоков вывода, т.е. записи. 
В классе OutputStream аналогичным образом определяются три метода: 
write() – один принимающий в качестве параметра int, второй – byte[] и третий – byte[], и два int-числа. Все эти методы ничего не возвращают
Для записи в поток сразу некоторого количества байт методу write() передается массив байт
Или, если мы хотим записать только часть массива, то передаем массив byte[] и два числа – отступ и количество байт для записи
Реализация потока вывода может быть такой, что данные записываются не сразу, а хранятся некоторое время в памяти. 
Чтобы убедиться, что данные записаны в поток, а не хранятся в буфере, вызывается метод flush()
Когда работа с потоком закончена, его следует закрыть, для этого вызывается метод close()
Методы: write(), write(byte[]), write(byte[], int, int), flush()

Закрытый поток не может выполнять операции вывода и не может быть открыт заново

