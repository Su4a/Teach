Любой процесс состоит из потоков. Потоки выполняются параллельно друг с другом - они используют адресное пространство процесса, которое делят между собой

Многопоточность применяется для следующих целей:
● Эффективное использование одного CPU несколькими потоками: допустим один из запущенных потоков обрабатывает http запрос , в это время другой поток может использовать CPU для выполнения своих задач. Если же у сервера несколько процессоров (или несколько ядер), многопоточность позволяет запускать потоки на отдельных ядрах CPU.
● Оптимальное использование нескольких центральных процессоров (или несколько ядер одного процессора): многопоточность позволяет запускать потоки на отдельных ядрах CPU, чтобы задействовать все процессоры или и ядра - один поток может запускаться максимум на одном CPU.
● Улучшенный UX в плане скорости ответа на запрос: допустим, пользователь нажимает на элемент в графическом интерфейсе (это действие направляет запрос по сети серверу) — вопрос, какой поток выполняет этот запрос. В однопоточном приложении, этот же поток будет отвечать за любой вид взаимодействия пользователя с приложением - это значит, что пока запрос не будет обработан, мы не сможем продолжить взаимодействие с программой. В многопоточном приложении мы можем создать фоновый поток, который будет обрабатывать запрос, в то время как поток отвечающий за интерфейс мог продолжить реагировать на другие действия.
● Улучшенный UX в плане распределения ресурсов: т.е. справедливое распределение ресурсов сервера между пользователями. Представьте web приложение, которое принимает запросы от клиентов, при этом используется один поток для обработки всех запросов. Пока этот поток обрабатывает один из запросов пользователя, остальные будут находиться в очереди, ожидания завершения обработки предыдущего. В многопоточном приложении, ни один из пользовательских запросов, выполняемый собственным потоком, не сможет полностью захватить вычислительные ресурсы процессора.