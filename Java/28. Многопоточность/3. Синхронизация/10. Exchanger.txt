Exchanger — точка синхронизации, позволяющая двум потокам обмениваться значениями
Представьте, что вы реализуете логистическое приложение — в рамках него двум автомобилям нужно пересечься в одной точке для обмена грузами — пока обмен не будет произведен, транспорт не может двинуться дальше по маршруту
При создании экземпляра Exchanger указывается тип объекта, которым будут обмениваться потоки. Когда поток вызывает метод exchange(), а другой поток не готов к обмену значениями, текущий поток переходит в состояние WAITING
Когда поток X подготовил значение, и метод exchange выполняет поток Y, то поток Y после выполнения метода не блокируется. Также у класса есть перегруженный метод exchange, который принимает время, которое поток будет находится в состоянии WAITING — в этом случае если процесс обмена не завершился, то генерируется проверяемое исключение TimeOutException

Отметим, что этот класс стоит использовать для обмена значениями между двумя потоками. Не стоит использовать Exchanger для одного потока (также для ситуации когда потоков больше чем 2) — такой поток будет в состоянии WAITING бесконечно долго

public static void main(String[] args) {
  Exchanger<String> ex = new Exchanger<String>();
  new Thread(new NewThread(ex, "First message", "First Thread")).start();
  new Thread(new NewThread(ex, "Second message", "Second Thread")).start();
  }

  static class NewThread implements Runnable{
    Exchanger<String> exchanger;
    String message;
    String name;

    public NewThread(Exchanger<String> exchanger, String message, String name) {
      this.exchanger = exchanger; 
      this.message = message;
      this.name = name;
    }

    public void run(){
      try{
        message=exchanger.exchange(message);
        System.out.println(name + " has received: " + message);
      }
      catch (InterruptedException ex) {
        System.out.println(ex.getMessage());
      }
    }
  }















