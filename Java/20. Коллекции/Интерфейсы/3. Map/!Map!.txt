Map, коллекция которая отображает ключ, к его значению 
Map не может содержать дублирующиеся ключи
Интерфейс Map<K, V> представляет отображение (словарь), где каждый элемент представляет пару "ключ-значение" 
Map гарантирует, что все ключи уникальны
Map не наследуется от интерфейса Collection

Методы:
1.(void) clear() Очистка коллекции
2.(boolean) containsKey(Object k) - Проверка, что коллекция содержит ключ k
3.(boolean) containsValue(Object v) - Проверка, что коллекция содержит значение v
4.(Set<Map.Entry<K, V>>) entrySet() - Возвращает набор элементов коллекции Set
5.(boolean) isEmpty() - Проверка, что коллекция пустая
6.(V) get(Object k) - Возвращает элемент V по ключу k
7.(V) put(K k, V v) - Добавляет в коллекцию новый объект с ключом k и значением v. Если в коллекции уже был объект с ключом k, то он перезаписывается и предыдущее значение v возвращается. Если такого ключа не было то возвращается null.
8.(V) putIfAbsent(K k, V v) - Добавляет в коллекцию новый объект с ключом k и значением v, если такого ключа не было
9.(Set<K>) keySet() - Возвращает набор всех ключей Map
10.(Collection<V>) values() - Возвращает набор всех значений Map
11.(V) remove(Object k) - Удаляет объект с ключом k
12.(int) size() - Возвращает количество элементов коллекции

Обобщенный интерфейс Map.Entry<K, V> представляет объект с ключом типа K и значением типа V и определяет следующие методы:
1.(K) getKey() - возвращает ключ объекта отображения
2.(V) getValue() - возвращает значение объекта отображения
3.(V) setValue(V v) - устанавливает для текущего объекта значение v
4.(int) hashCode() - возвращает хеш-код данного объекта
Получение Set из элементов Map очень удобно, когда нам нужно воспользоваться интерфейсом Collection, т.е. его методами (Map не имплементирует интерфейс Collection)