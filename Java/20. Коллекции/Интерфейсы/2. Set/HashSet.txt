HashSet - служит для создания коллекции, содержащей только уникальные элементы и основанной на использовании внутренней хеш-таблицы. Преимущество хеширования заключается в том, что оно обеспечивает постоянство времени выполнения методов add(), contains(), remove() и size()
HashSet это частный случай HashMap — вместо значения value используется константа

Имеет 2 основных параметра:
capacity - емкость, или количество элементов(bucket) во внутренней таблице HashSet, по-умолчанию начальная емкость HashSet равна 16, и всегда равна степени 2, при попытке указать в конструкторе начальную емкость равную 28, она автоматически будет увеличена до 32
loadFactor (по-умолчанию равен 0.75, должен находиться в пределах от 0.0 до 1.0) - коэффициент, который показывает что при добавлении в HashSet количества элементов большего чем capacity * loadFactor, емкость коллекции будет увеличена вдвое и произойдет рехеширование записей

HashSet<тип_данных> hs = new HashSet<>()

Конутруктор:
HashSet() - Создает пустой HashSet с начальной ёмкостью 16
HashSet(int initialCapacity) - Создает HashSet, имеющий указанную начальную емкость
HashSet(int initialCapacity, float loadFactor) - Создает HashSet, имеющий указанную начальную емкость и коэффициент заполнения
HashSet(Collection<? extends Е> сollection) - Создает HashSet, инициализируемый элементами из заданной коллекции сollection

Методы:
.add(E e) - добавить элемент

Особенности:
1. HashSet не гарантирует упорядоченности элементов