LinkedList - предоставляет структуру данных связного списка, где объекты связаны между собой ссылками друг на друга и могут
быть раскиданы по памяти. Сам же LinkedList имеет ссылку на свой первый и последний элемент
LinkedList не использует массивов в своей внутренней структуре

Имеет 1 основной парметр:
size - размер, указывает на то, сколько объектов уже хранится в нем

LinkedList<тип_данных> имя_переменной = new LinkedList<>();
List имя_переменной = new LinkedList<>();

Конструктор:
LinkedList<E>() - Создает пустой LinkedList
LinkedList<E>(Collection<? extends Е> сollection) - Создает LinkedList, инициализируемый элементами заданной коллекции сollection

Методы коллекции:
.addFirst(E e) - Добавить элемент в начало списка
.offerFirst(E e) - Добавить элемент в начало списка
.add(int index, E e) - Добавить элемент по индексу списка
.add(E e) - Добавить элемент в конец списка
.addLast(E e) - Добавить элемент в конец списка
.offerLast(E e) - Добавить элемент в конец списка
.get(int index) - Получить элемент по индексу
.getFirst() - Получить первый элемент списка
.peekFirst() - Получить первый элемент списка
.getLast() - Получить последний элемент списка
.peekLast() - Получить последний элемент списка
.remove(int index) - Получить элемент по индексу и удалить его из списка
.removeFirst() - Получить первый элемент и удалить его из списка
.pollFirst() - Получить первый элемент и удалить его из списка
.removeLast() - Получить последний элемент и удалить его из списка
.pollLast() - Получить последний элемент и удалить его из списка
.set(int index, E e) - Заменить элемент по позиции индекса списка

Особенности:
1. Позволяет производить поиск элемента по индексу, но для поиска элемента приходится обходить элементы коллекции и пробегать по ссылкам, пока не будет найден запрошенный элемент. Выбор начала поиска зависит от указанного индекса, и size объекта LinkedList, если индекс меньше size / 2, то поиск будет начинаться с начала коллекции, в противном случае - с конца
2. При удалении элемента нет необходимости куда-либо смещать элементы коллекции (как это происходит в ArrayList), достаточно лишь переписать ссылки у двух соседних с удаленным объектов

Полезное:
Arrays.asList(“A”, “B”, “C”, “D”) - дать массив в коллекцию объектом
toString() - выводит элементы коллекции, а не ссылку т.к. метод переопределен (sout)

Заметки:
1. Начиная с версии Java 1.8, при объявлении коллекций допустимо использовать запись: ArrayList<String> arrayList = new ArrayList<>();
До этой версии: ArrayList<String> arrayList = new ArrayList<String>();

Плюсы:
-Быстрое удаление и добавление элементов
Минусы:
-Долгий поиск по элементам