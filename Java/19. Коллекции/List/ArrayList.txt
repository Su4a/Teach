ArrayList - неограниченный динамический массив, который может расширяться и сужаться, при расширении коллекции емкость увеличивается в 1.5 раза

Имеет 2 основных парметра:
size - размер, указывает на то, сколько объектов уже хранится в нем
capacity - емкость, на сколько объектов рассчитана данная коллекция (по-умолчанию начальная емкость равна 10, и может задана через конструктор)

ArrayList<тип_данных> имя_переменной = new ArrayList<>();
List имя_переменной = new ArrayList();

Конструктор:
ArrayList<E>() - Создает пустой ArrayList с начальной ёмкостью 10
ArrayList<E>(int initialCapacity) - Создает ArrayList, имеющий указанную начальную емкость initialCapacity
ArrayList<E>(Collection<? extends Е> сollection) - Создает ArrayList, инициализируемый элементами заданной коллекции сollection

Методы коллекции:
.add(E e) - добавить элемент в конец списка. Данный метод всегда возвращает true
.add(int index, E e) - добавить элемент на индекс списка, правая часть смещается на один индекс вправо. Данный метод всегда возвращает true
.set(int index, E e) - Заменить элемент на позиции index
.get(int index) - Получить элемент списка с индексом index
.remove(int index) - Удалить элемент списка с заданной позиции, вернуть ссылку на удаленный объект
.remove(E e) - Удалить заданный объект из списка, вернуть — true, если объект был удален, false — в противном случае
.contains(E e) - Проверить на присутствие указанного элемента в списке. Возвращает true/false
.int size() - Получить размер списка
.trimToSize() - «Урезать» емкость списка до его размера
.ensureCapacity(int capacity) - Увеличить емкости списка до значения capacity, только если текущая емкость меньше указанной
.toArray(arr) - преобразовать коллекцию в массив и положить элементы коллекции в массив arr. Массив должен иметь такой же тип данных, что и коллекция и иметь размер не меньше размера коллекции
.toArray() - возвратить массив объектов типа коллекции


Особенности:
1. В ArrayList не может быть пустых мест. При удалении элемента происходит смещение соседних элементов влево
2. Null может содержаться только тогда, если его туда добавить
3. Новый ArrayList также не состоит из набора null, при попытке обратиться к элементу с индексом, превышающим size, будет брошено исключение - IndexOutOfBoundException

Полезное:
Arrays.asList(“A”, “B”, “C”, “D”) - дать массив в коллекцию объектом
toString() - выводит элементы коллекции, а не ссылку т.к. метод переопределен (sout)

Заметки:
1. Начиная с версии Java 1.8, при объявлении коллекций допустимо использовать запись: ArrayList<String> arrayList = new ArrayList<>();
До этой версии: ArrayList<String> arrayList = new ArrayList<String>();

Плюсы:
-Быстрый поиск по индексам элементов
Минусы:
-Долгое удаление и добавление элементов