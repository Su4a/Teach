Полиморфизм
Полиморфизм – это возможность объектов с одинаковой спецификацией иметь
различную реализацию (Overriding). Полиморфизм выражается возможностью
переопределения поведения суперкласса (часто можно встретить утверждение, что
при помощи перегрузки

Полиморфизм - позднее связывание
Если 2 наследника с общим предком, то этот предок может быть общим типом при создании наследника (связывает наследников с родителем через его тип, приобретая тип родителя)
Общим типом может выступать не только родитель, но и их интерфейс, которого он реализует

Объекты с поздним связыванием могут загружаться в массивы и другие хранящие память ячейки, сохраняя свою индивидуальность
При обращении к подклассу через ссылку суперкласса мы будем видеть только те методы и поля, которые предоставляет нам сам суперкласс. Для использования полей и методов подкласса через ссылку суперкласса необходимо явно указать класс с которым мы работаем ((Имя_подкласса)имя_суперкласса).имя_метода()
При обращении к неверному имени подкласса с ссылкой на суперкласс, эта операция приведет к ошибке ClassCastException
instanceof - оператор проверки на принадлежность объекта к классу для проверки на ошибки связывания и вызова объектов своих суперклассов, определяет принадлежность к классу, типизации


Аннотация @Override проверяет, действительно ли метод переопределяется, а не перегружается
Полиморфизм чаще всего используется когда нужно описать
поведение абстрактного класса или назначить разным наследникам разное
поведение, одинаково названное в классе родителе