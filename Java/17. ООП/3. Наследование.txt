Наследование - расширение (форма взаимоотношения между объектами)
Наследование - объявление класса на базе другого с его полями и методами, наследуя члены класса своего родителя с возможностью добавлять новые свойства и члены класса
extends - наследование класса от родителя/предка(суперкласс)

class имя_наследника extends имя_родителя

Суперкласс - родительский класс с которого копируются все поля и методы в класс его наследника/потомка (Класс потомок расширяет класс предка)
Не наследуются: поля и методы, помеченные модификатором private
У наследника не может быть двух родителей (множественного наследования в Java нет!)

Важно запомнить, что при создании любого объекта в первую очередь вызывается
конструктор его базового (родительского) класса, а только потом — конструктор
самого класса, объект которого мы создаем

При наследовании, если у предка есть конструктор, нужно создать конструктор с аналогичными параметрами и у потомка и первой строкой вызвать с конструктора потомка конструктор родителя (super(параметры_конструктора)). Произойдет обращение к конструктору родителя. Вызов родительского конструктора должен быть всегда первым оператором в дочернем конструкторе. Если в дочернем конструкторе явно не использовать super, то автоматически первой строкой будет вызываться конструктор по умолчанию родителя

Конструкторы вызываются в порядке наследования, от первого класса к последнему, посколько суперклассу ничего не известно о своих подклассах

Если при наследовании имя переменной/метода родителя совпадает с именем переменной дочернего класса, то обращение к переменной родителя происходит через оператор super

При вызове контструктора дочернего класса, он будет идти по иерархии вниз по родителям, вызывая конструктора родителей пока не дойдет до самого дочернего класса в котором вызывался конструктор, тем самым дополняя всю реализацию наследования

При создании метода у класса наследника с одинаковой сигнаторой как у его родителя будет перекрытие методов (hiding):
В таком случае скрывается класс родителя и вызывается класс наследника (если они были статические, обычные просто переопределяются)
