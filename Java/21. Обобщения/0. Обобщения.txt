Обобщения – это механизм создания общего подхода к реализации одинаковых алгоритмов, но с разными данными
Обобщения – это некоторые конструкции, позволяющие работать с данными не задумываясь о том, какие именно данные лежат внутри структуры или метода
Generics - механизм языка, который позволяет создавать обобщенные (шаблонизированные) типы и методы (особый подход к описанию данных и алгоритмов, позволяющий работать с различными типами данныых без изменения внешнего описания)
Generics - предоставляет безопасность типов во время компиляции, что обзанает, что ошибки связанные с типами данных могут быть обнаружены на этапе компиляции, а не во время выполнения программы
Обобщения позволяют единообразно работать с разными типами данных

Обобщённое программирование в Java позволяет создавать классы, интерфейсы и методы, которые могут работать с 
различными типами данных. В результате, код становится более универсальным и повторно используемым

Для описания обобщения в треугольных скобках пишется буква, чтобы обознаить Тип данных
На этапе описания класса невозможно сказать какого типа данные будут лежать в переменной во время исполнения
Таким образом указывается, что это обобщение и тип будет задаваться при создании объекта
После создания обобщения его тип нельзя будет поменять, Java - язык сильной типизации

Параметр типа и Аргумент типа это два разных понятия:
- когда объявляется обобщенный тип, то Т является параметром типа
- когда происходит обращение к обобщенному типу, то Т является аргументом типа

Посоглашению, переменные типа именуются одной буквой в верхнем регистре 
Если обобщённых переменных более одной – они пишутся через запятую
E – элемент (Element, Entity обширно используется Java Collections);
K – Ключ;
N – Число;
T – Тип;
V – Значение;
S, U, и т. п. — 2-й, 3-й, 4-й типы

Ограничения обобщений:
1. Невозможно внутри метода обобщенного класса создать экземпляр параметризующего класс Т, потому что на этапе компиляции об этом классе ничего не известно
2. Нельзя создавать внутри обобщения массив из обобщенного типа данных, но всегда можно подать такой массив снаружи
3. По причине отсутствия информации о параметризующем классе, невозможно создать статическое поле типа. Конкретный типа для параметра Т становится известен только при создании объекта обобщенного класса
4. Обобщённый класс не может расширять класс Throwable напрямую или опосредовано. Метод не может ловить (catch) экземпляр параметра типа. Однако можно использовать параметр типа в throws
5. Класс не может иметь два перегруженных метода, которые будут иметь одинаковую сигнатуру после стирания типов. Такой код не скомпилируется
6. Запрещено использовать приведения типов для обобщённых объектов. Так как компилятор стирает все параметры типа из обобщённого кода, то нельзя проверить во время выполнения, какой параметризованный тип используется для обобщённого типа

