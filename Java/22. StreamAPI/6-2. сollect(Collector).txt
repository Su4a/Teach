Этот метод часто используется в конвейере потока
Его применяют для сбора результата потока в определенную структуру: строку, коллекцию (List, Set, Map)
Метод принимает объект типа Collector в качестве аргумента, который определяет способ осуществления операции подсчета

Класс Collector:
Интерфейс Collector инкапсулирует процесс комбинирования элементов потока в одну итоговую структуру
Коллекторы можно использовать с различными методами потока, такими как collect(), groupingBy(), joining(), partitioningBy() и др.
Класс Collectors содержит набор статических методов-коллекторов, которые упрощают выполнение общих операций, таких как преобразование элементов в списки, множества и другие структуры данных

Вот некоторые наиболее популярные методы класса Collectors:
1.toList(): Этот метод возвращает коллектор, который накапливает входные элементы в новый List
2.toSet(): Этот метод возвращает коллектор, который накапливает входные элементы в новый Set
3.joining(): Возвращает коллектор, который объединяет элементы потока в единую строку
4.counting(): Возвращает коллектор, который подсчитывает количество элементов в потоке

Вы можете быстро реализовать метод collect(Collector<? super T, A, R> collector) для сбора элементов в какую-то конкретную структуру:
Stream<?> stream;
List<?> list = stream.collect(Collectors.toList());

//Коллектор выше аналогичен данному коду
list = stream.collect(
        () -> new ArrayList<>(), // определяем структуру
        (list, t) -> list.add(t), // определяем, как добавлять элементы
        (l1, l2) -> l1.addAll(l2) // и как объединять две структуры в одну
);