map(Function) - Метод map() принимает в качестве аргумента функциональный интерфейс Function, задающий преобразование, применяемое к каждому элементу 
Возвращаемый поток содержит преобразованные элементы
Метод map() возвращает новый поток. Он не изменяет исходный поток и коллекцию
Обычно он используется для выполнения операций, таких как преобразование элементов из одного типа в другой

Stateless операция
ORDERED: обычно сохраняется.
DISTINCT, SORTED: могут быть потеряны.
SIZED, SUBSIZED: обычно сохраняются.
NONNULL: может быть потеряно.
IMMUTABLE, CONCURRENT: сохраняются.

Пример:
List<String> words = Arrays.asList("apple", "banana", "orange", "peach");
Stream<Integer> lengthsStream = words.stream()
        .map(String::length);
lengthsStream.forEach(System.out::println); // prints 5, 6, 6, 5

В данном примере мы с помощью map() преобразовали строку в количество символов в строке, используя короткую запись лямбды (String::length), так называемую ссылку на метод

Особенности:
Если вернуть другой тип данных, то map поменяет тип данных коллекции

Дополнения map:
mapToInt, mapToDouble, mapToLong
Аналог map, но возвращает числовой стрим (то есть стрим из числовых примитивов)
collection.stream().mapToInt((s) ­> Integer.parseInt(s)).toArray()



























