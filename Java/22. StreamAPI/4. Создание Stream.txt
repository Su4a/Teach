Есть несколько способов создать поток с использованием Stream API. Например, вы можете создать поток из коллекции с помощью метода stream() или из массива с помощью метода of(). 
Как только у вас есть поток, вы можете выполнять различные операции с помощью методов, предоставляемых Stream API

1.От коллекции:
Вы можете создать поток из любой коллекции Java, например, списка или множества, с помощью метода stream()
Collection<Integer> list = new ArrayList<>();
Stream<Integer> stream = list.stream();

2.Из массива:
Поток может быть создан из массива с помощью метода Arrays.stream()
int[] numbers = {1, 2, 3};
Stream<Integer> stream = Arrays.stream(numbers).boxed();

3.Из строки
Поток может быть создан из строки с помощью метода chars(), который возвращает IntStream
String str = "Hello";
IntStream stream = str.chars();

4.Из значений
Stream<String> streamFromValues = Stream.of("a1", "a2", "a3");

5.Из файла
Каждая строка в файле будет отдельным элементом в стриме
Поток может быть создан из строк файла с помощью метода Files.lines().
Path path = Paths.get("file.txt");
Stream stream = Files.lines(path);

6.Stream из Iterator-а
Многие источники данных хорошо делятся на части, что позволяет использовать преимущества параллельной обработки.
Однако такие источники, как Files.lines(), Files.find(), Files.walk(), Files.list(), BufferedReader().lines(), Pattern.splitAsStream(), создают вначале Iterator, который затем трансформируется в Spliterator
Проблема в том, что Iterator не содержит информации о размере исходного набора данных. Тем временем, для эффективной работы, Spliterator предполагает наличие информации о размере
Без этой информации Spliterator не может эффективно разбивать данные на части, что может привести к снижению эффективности параллелизма или даже к его полному отсутствию
Stream<Integer> streamFromIterate = Stream.iterate(1, n ­> n + 1)

7.Генерирование
Поток может быть создан с помощью метода Stream.generate(Supplier). Supplier должен возвращать новое значение при каждом вызове.
Stream stream = Stream.generate(() -> new Random().nextInt());

8.Билдер
Поток может быть создан с помощью Stream.Builder.
Stream.Builder builder = Stream.builder();
builder.add(1);
builder.add(2);
builder.add(3);
Stream stream = builder.build();

9.Создание параллельного стрима:
Stream<String> stream = collection.parallelStream();

































