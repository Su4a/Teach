Представления это виртуальные таблички, которые никак не влияют на саму базу данных
- результат выполнения запроса к базе данных, является виртуальной копией таблички
- OR REPLACE - необязательный атрибук. Если не указать его и таблица уже создана то оператор CREATE VIEW вернет ошибку
- имя_представления - имя, которым будет называться виртуальная таблица
- WHERE - условия, которые должны быть выполнены для записей, которые должны быть включены в VIEW
- представление управляется такими же командами как и таблицы, меняется только TABLE на VIEW

CREATE [OR REPLACE] VIEW имя_представления AS
SELECT имя_поля FROM имя_таблицы
[WHERE условие]

Прмиер:
CREATE VIEW Londonstaff AS
SELECT * FROM Salespeople
WHERE city = 'London'

SELECT * FROM Londonstaff

Преимущества:
1. Безлпасность - мы можем создавать представления с некоторыми специфическими атрибутами для соответствующих пользователей
2. Простота запроса - представление может быть создано путем выборки данных из нескольких таблиц
3. Структурная простота - мы можем предоставить базу данных как набор вирутальных таблиц, понятных пользователю

Недостатки:
1. Производительность - если запрос представления очень сложный, содержит несколько источников и сложные алгоритмы, то простые действия с этим представлением занимают значительное время
2. Ограничения обновления - при изменении строк в представлении СУБД должна преобразовать запрос в обновление строк базовой исходной таблицы. Обновление можно выполнить в простом запросе, но в случае сложного запроса СУБД не позволит обновить, т.к. представления часто ограничены только чтением

